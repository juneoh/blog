<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://juneoh.com/</title>
   
   <link>https://juneoh.com/</link>
   <description>A personal blog on life and technology.</description>
   <language>en-us</language>
   <managingEditor> June Oh</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Pandas</title>
	  <link>https://juneoh.com//Pandas</link>
	  <author>June Oh</author>
	  <pubDate>2017-10-22T00:00:00+09:00</pubDate>
	  <guid>https://juneoh.com//Pandas</guid>
	  <description><![CDATA[
	     <h2 id="the-case">The case</h2>

<p>Here is a typical CSV data, which is a data in a 2 dimensional table form:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">name</th>
      <th style="text-align: center">area</th>
      <th style="text-align: center">population</th>
      <th style="text-align: center">…</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Monaco</td>
      <td style="text-align: center">1.98</td>
      <td style="text-align: center">36,371</td>
      <td style="text-align: center">…</td>
    </tr>
    <tr>
      <td style="text-align: center">Gibraltar</td>
      <td style="text-align: center">6.8</td>
      <td style="text-align: center">29,431</td>
      <td style="text-align: center">…</td>
    </tr>
    <tr>
      <td style="text-align: center">Vatican City</td>
      <td style="text-align: center">0.44</td>
      <td style="text-align: center">900</td>
      <td style="text-align: center">…</td>
    </tr>
    <tr>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
    </tr>
  </tbody>
</table>

<p>Let’s pick a column from the table:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">area</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1.98</td>
    </tr>
    <tr>
      <td style="text-align: center">6.8</td>
    </tr>
    <tr>
      <td style="text-align: center">0.44</td>
    </tr>
    <tr>
      <td style="text-align: center">…</td>
    </tr>
  </tbody>
</table>

<p>The data in this column is <strong><u>homo</u>geneous</strong>; all the values are in the same type, the decimal number.</p>

<p>Let’s pick a row from the table:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">name</th>
      <th style="text-align: center">area</th>
      <th style="text-align: center">population</th>
      <th style="text-align: center">…</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Monaco</td>
      <td style="text-align: center">1.98</td>
      <td style="text-align: center">36,371</td>
      <td style="text-align: center">…</td>
    </tr>
  </tbody>
</table>

<p>The data in this row is <strong><u>hetero</u>geneous</strong>; the values are in different types, text(name), decimal(area), and integer(population).</p>

<p><strong>Homogeneity is good for speed.</strong> If your data is homogeneous, each value can be stored in the same length of memory. This allows faster access to each value, because you can jump between memory addresses by calculating the distance between values. Both NumPy and Pandas support such technique.</p>

<p><strong>But real-life data are heterogeneous.</strong> NumPy enforces complete homogeneity within data, e.g. integer matrix. If you have varying types, NumPy will treat them as the heavy <code>object</code> type. But in Pandas, you can have a mix of homogeneity and heterogeneity, perfect for representing data tables.</p>

<hr />

<h2 id="the-application">The application</h2>

<p>Pandas provides a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html"><code>DataFrame</code></a> class that represents 2 dimensional tabular data. It is very similar to R programming language’s <code>dataframe</code> class.</p>

<p>Although being a great tool, Pandas has some oddities that will be explained later on:</p>

<ul>
  <li>Having multiple ways of getting the same value, some ways being read-only and some read-write
    <ul>
      <li>Using <code>[]</code>, attributes, <code>.loc</code>, and <code>.iloc</code></li>
    </ul>
  </li>
  <li>The confusing relationship between indices and labels
    <ul>
      <li>Namely, <code>.sort_index()</code> that sorts by labels, not indices</li>
    </ul>
  </li>
</ul>

<p>Pandas can be easily installed via <code>pip</code>.</p>

<h3 id="creating-dataframe">1. Creating <code>DataFrame</code></h3>

<p>The examples below suppose a <code>countries.csv</code> file with the following contents:</p>

<pre><code class="language-csv">name,area,population
Monaco,1.98,36371
Gibraltar,6.8,29431
Vatican City,0.44,900
</code></pre>

<hr />

<h4 id="dataframe-fromto-csv">1.1. <code>DataFrame</code> from/to CSV</h4>

<p><img src="assets/posts/2017-10-22-Pandas/csv.jpg" alt="" /></p>

<p>Use
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_csv.html"><code>pandas.DataFrame.from_csv()</code></a> to create a <code>DataFrame</code> object from a CSV
file:</p>

<pre><code class="language-python">&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame.from_csv("countries.csv", index_col=None)
&gt;&gt;&gt; df
           name  area  population
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<p>You can be more explicit with
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html"><code>pandas.read_csv()</code></a>:</p>

<pre><code class="language-python">&gt;&gt;&gt; df = pd.read_csv("countries.csv", header=0, names=("v1", "v2"), index_col=0, dtype=str)
&gt;&gt;&gt; df
                v1     v2
Monaco        1.98  36371
Gibraltar     6.80  29431
Vatican City  0.44    900
</code></pre>

<p>Use
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html"><code>pandas.DataFrame.to_csv()</code></a> to write a <code>DataFrame</code> object to a CSV file.</p>

<pre><code class="language-python">&gt;&gt;&gt; df.to_csv("countries.csv", index=False)
</code></pre>

<hr />

<h4 id="dataframe-from-2d-list">1.2. <code>DataFrame</code> from 2D <code>list</code></h4>

<p><img src="assets/posts/2017-10-22-Pandas/list.jpg" alt="" /></p>

<p>Use
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_records.html"><code>pandas.DataFrame.from_records()</code></a>
to create a <code>DataFrame</code> object from a <code>list</code> of <code>list</code>s/<code>tuple</code>s:</p>

<pre><code class="language-python">&gt;&gt;&gt; data = [("Monaco", 1.98, 36371), ("Gibraltar", 6.8, 29431), ("Vatican City", 0.44, 900)]
&gt;&gt;&gt; df = pd.DataFrame.from_records(data, columns=("name", "area", "population"))
&gt;&gt;&gt; df
           name  area  population
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<p>Or from a <code>list</code> of <code>dict</code>s:</p>

<pre><code class="language-python">&gt;&gt;&gt; data = []
&gt;&gt;&gt; data.append({"name": "Monaco", "area": 1.98, "population": 36371})
&gt;&gt;&gt; data.append({"name": "Gibraltar", "area": 6.80, "population": 29431})
&gt;&gt;&gt; data.append({"name": "Vatican City", "area": 0.44, "population": 900})
&gt;&gt;&gt; df = pd.DataFrame.from_records(data)
&gt;&gt;&gt; df
   area          name  population
0  1.98        Monaco       36371
1  6.80     Gibraltar       29431
2  0.44  Vatican City         900
</code></pre>

<p><strong>But note that Python’s <code>dict</code> does not keep orders.</strong> When using a <code>list</code> of <code>dict</code>, column names are automatically generated from <code>dict</code> keys; but they may not be in your favorite order. However, you can easily reorder the columns:</p>

<pre><code class="language-python">&gt;&gt;&gt; df = df[["name", "area", "population"]]
&gt;&gt;&gt; df
           name  area  population
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<p>How this works is explained in the next section.</p>

<hr />

<h3 id="indexing-dataframe">2. Indexing <code>DataFrame</code></h3>

<h4 id="select-columns-and-cells-like-a-dict-or-an-object">2.1. Select columns and cells like a <code>dict</code> or an <code>object</code></h4>

<p><img src="assets/posts/2017-10-22-Pandas/col.jpg" alt="" /></p>

<p><strong>You can index <code>DataFrame</code> just like a <code>dict</code>.</strong> There’s one thing: in NumPy, rows come first, but in Pandas you can have columns come first.</p>

<pre><code class="language-python">&gt;&gt;&gt; df
           name  area  population
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<pre><code class="language-python">&gt;&gt;&gt; df["name"]
0        Monaco
1     Gibraltar
2  Vatican City
Name: name, dtype: object
</code></pre>

<pre><code class="language-python">&gt;&gt;&gt; df["name"][0]
'Monaco'
</code></pre>

<p><strong>You can also access columns as attributes.</strong></p>

<pre><code class="language-python">&gt;&gt;&gt; df.name
0        Monaco
1     Gibraltar
2  Vatican City
Name: name, dtype: object
</code></pre>

<pre><code class="language-python">&gt;&gt;&gt; df.name[0]
'Monaco'
</code></pre>

<p><strong>Slicing</strong> is also supported, which is useful for reordering columns.</p>

<pre><code class="language-python">&gt;&gt;&gt; df[["name", "area"]]
           name  area
0        Monaco  1.98
1     Gibraltar  6.80
2  Vatican City  0.44
&gt;&gt;&gt; df[["area", "name"]]
   area          name
0  1.98        Monaco
1  6.80     Gibraltar
2  0.44  Vatican City
</code></pre>

<p><strong>But you shouldn’t <u>set</u> a value this way:</strong></p>

<pre><code class="language-python">&gt;&gt;&gt; df["name"][0] = "Monaco"
__main__:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
</code></pre>

<p>The error message is kind enough to offer <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy">a link to a documentation page</a>. But for the busy and lazy, here’s a summary: chain indexing like <code>df["name"][0]</code> makes two <code>__getitem__</code> calls internally, so it’s significantly slower when setting values. To go around this, see the next section on using a single <code>.loc</code> for setting(and getting) values.</p>

<hr />

<h4 id="select-rows-and-cells-with-loc-and-iloc">2.2. Select rows and cells with <code>.loc</code> and <code>.iloc</code></h4>

<p><img src="assets/posts/2017-10-22-Pandas/row.jpg" alt="" /></p>

<p><code>df.loc</code> is another <code>dict</code>-like way to index a <code>DataFrame</code> object, but this time <strong>rows come before columns.</strong></p>

<pre><code class="language-python">&gt;&gt;&gt; df.loc[0]
name          Monaco
area            1.98
population     36371
Name: 0, dtype: object
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; df.loc[0, "name"]
'Monaco'
</code></pre>

<p><strong>You can safely set values with <code>.loc</code>.</strong></p>

<pre><code class="language-python">&gt;&gt;&gt; df.loc[0, "name"] = "MONACO"
&gt;&gt;&gt; df
           name  area  population
0        MONACO  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<p><strong>Slicing</strong>, of course, comes naturally. There’s also <code>.head()</code> and <code>.tail()</code> methods as shortcuts.</p>

<pre><code class="language-python">&gt;&gt;&gt; df.loc[1:2]
        name  area  population
1  Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; df.loc[0, ["name", "area"]]
name    Monaco
area      1.98
Name: 0, dtype: object
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; df.loc[:, "name"]
0        Monaco
1     Gibraltar
2  Vatican City
Name: name, dtype: object
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; df.head(2)
        name  area  population
0     Monaco  1.98       36371
1  Gibraltar  6.80       29431
</code></pre>

<p><code>df.loc</code> also has a cousin <code>df.iloc</code>, who accepts only integer indices. That means string column names are no-no for <code>df.iloc</code>. But <code>df.iloc</code> is useful because <strong><code>df.loc</code> is actually fetching the rows by their labels, not their indices.</strong></p>

<ul>
  <li><strong>Labels</strong> are like <code>dict</code> keys;
    <ul>
      <li>You can have string labels as well as integer labels.</li>
      <li>Labels’ orders are arbitrary, not alphabetic or numeric.</li>
    </ul>
  </li>
  <li><strong>Indices</strong> are like <code>list</code> indices;
    <ul>
      <li>Indices are always integers.</li>
      <li>Indices are automatically numbered.</li>
    </ul>
  </li>
</ul>

<p>The example below shows the difference between labels and indices: if you reorder the rows, labels will follow; but indices will be recalculated automatically.</p>

<pre><code class="language-python">&gt;&gt;&gt; df2 = df.loc[[2,1,0], "name"]
&gt;&gt;&gt; df2
2  Vatican City
1     Gibraltar
0        Monaco
Name: name, dtype: object
&gt;&gt;&gt; df2.loc[0]
'Monaco'
&gt;&gt;&gt; df2.iloc[0]
'Vatican City'
</code></pre>

<p>So, a pros-and-cons summary:</p>

<ul>
  <li><code>df[][]</code> is easy, but it’s not for setting values.</li>
  <li><code>df.loc[]</code> lets you set values, but the labels can be in mixed order.</li>
  <li><code>df.iloc[]</code> lets you set values, but you can’t use string labels.</li>
</ul>

<p><strong>In short, use <code>.loc[]</code> by default, and take <code>df.column_name</code> or <code>df["column_name"]</code> as its read-only shortcut.</strong></p>

<hr />

<h4 id="iterating-through-rows">2.3. Iterating through rows</h4>

<p><img src="assets/posts/2017-10-22-Pandas/iter.jpg" alt="" /></p>

<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html"><code>df.iterrows()</code></a> is your friend if you want to loop the rows of your data:</p>

<pre><code class="language-python">&gt;&gt;&gt; for i, row in df.iterrows():
...     print(row["name"])
... 
Monaco
Gibraltar
Vatican City
</code></pre>

<hr />

<h4 id="filtering-and-unique-values">2.4. Filtering and unique values</h4>

<p><img src="assets/posts/2017-10-22-Pandas/filter.jpg" alt="" /></p>

<p><strong>Pandas supports boolean list filtering, which can be used to select items by condition.</strong> This is one of the killer apps of Pandas. Let’s pick countries that have lower area than 2 square kilometers:</p>

<pre><code class="language-python">&gt;&gt;&gt; df.area &lt; 2
0     True
1    False
2     True
Name: area, dtype: bool
&gt;&gt;&gt; df.loc[df.area &lt; 2]
           name  area  population
0        Monaco  1.98       36371
2  Vatican City  0.44         900
</code></pre>

<p>This works because <code>df.area</code> is interpreted as a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html#pandas.Series"><code>Series</code></a> object which supports element-wise operations. See section 3.1. for more details.</p>

<p>Also,
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html"><code>.unique()</code></a> method on a column gives you unique values in the column.</p>

<pre><code class="language-python">&gt;&gt;&gt; df2 = df.loc[[0, 1, 1]]
&gt;&gt;&gt; df2
        name  area  population
0     Monaco  1.98       36371
1  Gibraltar  6.80       29431
1  Gibraltar  6.80       29431
&gt;&gt;&gt; df2.name.unique()
array(['Monaco', 'Gibraltar'], dtype=object)
</code></pre>

<hr />

<h3 id="data-manipulation">3. Data manipulation</h3>

<h4 id="adding-a-new-column-or-a-row">3.1. Adding a new column or a row</h4>

<p><img src="assets/posts/2017-10-22-Pandas/add.jpg" alt="" /></p>

<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.assign.html"><code>df.assign()</code></a> method returns a new <code>DataFrame</code> object with the newly assign column(s).</p>

<pre><code class="language-python">&gt;&gt;&gt; df.assign(population_density=(df.population/df.area).astype(int))
           name  area  population  population_density
0        Monaco  1.98       36371               18369
1     Gibraltar  6.80       29431                4328
2  Vatican City  0.44         900                2045
</code></pre>

<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.append.html"><code>df.append()</code></a> method returns a new <code>DataFrame</code> object, this time with the newly appended row(s).</p>

<pre><code class="language-python">&gt;&gt;&gt; new_rows = []
&gt;&gt;&gt; new_rows.append({"name": "San Marino", "area": 61, "population": 27730})
&gt;&gt;&gt; new_rows.append({"name": "Malta", "area": 316, "population": 397499})
&gt;&gt;&gt; df.append(new_rows, ignore_index=True)
           name    area  population
0        Monaco    1.98       36371
1     Gibraltar    6.80       29431
2  Vatican City    0.44         900
3    San Marino   61.00       27730
4         Malta  316.00      397499
</code></pre>

<p>Like <code>df.assign()</code> and <code>df.append()</code>, <strong>almost all operations on a <code>DataFrame</code> object returns a new object</strong>, instead of changing the data in-place.</p>

<hr />

<h4 id="sorting">3.2. Sorting</h4>

<p><img src="assets/posts/2017-10-22-Pandas/sort.jpg" alt="" /></p>

<p>Use
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html"><code>df.sort_values()</code></a> sort a column by value.</p>

<pre><code class="language-python">&gt;&gt;&gt; df2 = df.sort_values("area")
           name  area  population
2  Vatican City  0.44         900
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
</code></pre>

<p>Use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_index.html"><code>df.sort_index()</code></a> to sort by labels. Yes, it should be called <code>df.sort_labels()</code> instead, but oh well.</p>

<pre><code class="language-python">&gt;&gt;&gt; df2.sort_index()
           name  area  population
0        Monaco  1.98       36371
1     Gibraltar  6.80       29431
2  Vatican City  0.44         900
</code></pre>

<hr />

<h4 id="element-wise-operations-and-type-conversions">3.3. Element-wise operations and type conversions</h4>

<p><img src="assets/posts/2017-10-22-Pandas/element.jpg" alt="" /></p>

<p><strong>1D data in Pandas is a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html#pandas.Series"><code>Series</code></a> object, and it supports element-wise operations and type conversions.</strong> If you slice a 1D data from a <code>DataFrame</code> object, e.g. a column or a row, it will be an object of the <code>Series</code> class. A <code>Series</code> object is homogeneous, so it supports type conversions through the NumPy-like <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.astype.html"><code>.astype()</code></a> method.</p>

<p>Let’s calculate the population density per country using an element-wise division:</p>

<pre><code class="language-python">&gt;&gt;&gt; (df.population / df.area).astype(int)
0    18369
1     4328
2     2045
dtype: int32
</code></pre>

<p>Element-wise operations can be used to create boolean filters, which was used in section 2.3. to select items by condition.</p>

<pre><code class="language-python">&gt;&gt;&gt; df.area &lt; 2
0     True
1    False
2     True
Name: area, dtype: bool
</code></pre>

<hr />

<h4 id="applying-a-function-over-a-column">3.4. Applying a function over a column</h4>

<p><img src="assets/posts/2017-10-22-Pandas/apply.jpg" alt="" /></p>

<p>Use
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html"><code>.apply()</code></a> to broadcast a function over multiple values.</p>

<pre><code class="language-python">&gt;&gt;&gt; df.name.apply(lambda x: x.upper())
0          MONACO
1       GIBRALTAR
2    VATICAN CITY
Name: name, dtype: object
</code></pre>

<hr />

<h2 id="further-reading">Further reading</h2>

<p>From the <a href="http://pandas.pydata.org/pandas-docs/stable/index.html">official docs</a>:</p>

<ul>
  <li><a href="https://pandas.pydata.org/pandas-docs/stable/dsintro.html">Intro to Data
  Structures</a></li>
  <li><a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html">Indexing and Selecting
  Data</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>11줄의 코드, 인터넷을 패닉에 빠뜨리다</title>
	  <link>https://juneoh.com//11%EC%A4%84%EC%9D%98-%EC%BD%94%EB%93%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%9D%84-%ED%8C%A8%EB%8B%89%EC%97%90-%EB%B9%A0%EB%9C%A8%EB%A6%AC%EB%8B%A4</link>
	  <author>June Oh</author>
	  <pubDate>2016-04-04T00:00:00+09:00</pubDate>
	  <guid>https://juneoh.com//11%EC%A4%84%EC%9D%98-%EC%BD%94%EB%93%9C-%EC%9D%B8%ED%84%B0%EB%84%B7%EC%9D%84-%ED%8C%A8%EB%8B%89%EC%97%90-%EB%B9%A0%EB%9C%A8%EB%A6%AC%EB%8B%A4</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>이 글은 <a href="http://www.bloter.net/archives/253447">블로터에 기고했던 글</a>입니다.</p>
</blockquote>

<p>지난 3월22일 오후 5시 30분경(미국 동부시각), 전세계 Node.js 커뮤니티 개발자들은
큰 혼란에 빠졌다. Node.js 기술 기반으로 인터넷에서 돌아가는 수천개의
프로그램들이 한순간 먹통이 됐기 때문이다. 영향을 받은 프로그램 가운데는
페이스북, 넷플릭스, 야후, 페이팔 등 유수 기업들이 사용하는 프로그램도 섞여
있었다.</p>

<p>혼란에 빠진 개발자들은 이 막대한 피해의 진앙지를 찾아 인터넷을 뒤졌다. 원인은 곧
드러났다. 캘리포니아의 한 개발자가 삭제한 11줄의 코드 때문이었다.</p>

<p><img src="/assets/posts/2016-04-04-11줄의-코드-인터넷을-패닉에-빠뜨리다/comment.jpg" alt="" /></p>

<blockquote>
  <p>“이거 인터넷을 망가뜨린 것 같은데요.” – <a href="https://github.com/azer/left-pad/issues/4#issuecomment-200051244">어느 개발자가 남긴
댓글</a></p>
</blockquote>

<h2 id="section">사건의 재구성</h2>

<p>아제르 코출루라는 개발자는 ‘킥’(Kik)이라는 이름의 프로그램을 개발하고 있었다.
그는 이 프로그램을 누구나 사용할 수 있도록 <a href="https://www.npmjs.org/">NPM(Node.js Package
Manager)</a>이라는
개발자 커뮤니티에 공개했다. 며칠 뒤, 코출루는 한 통의 e메일을 받게 된다.</p>

<blockquote>
  <p>“저희도 재수없게 굴기는 싫지만, 킥은 세계 대부분의 국가에 등록된 저희 상표이니,
만일 같은 이름의 오픈소스 프로젝트를 공개하신다면 저희 상표권 변호사들이 당신
집에 찾아가서 현관문을 쾅쾅 두드리고 당신 계정을 삭제하려 할 겁니다.” –
<a href="https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.x44n232zr">아제르 코출루 미디엄 글 발췌</a></p>
</blockquote>

<p><img src="/assets/posts/2016-04-04-11줄의-코드-인터넷을-패닉에-빠뜨리다/kik.jpg" alt="" /></p>

<blockquote>
  <p>메신저 ‘킥’</p>
</blockquote>

<p>코출루는 운이 나빴다. ‘Kik’이라는 상표를 등록한 동명의 메신저 서비스가 있었다.
이들은 상표권을 주장하며 코출루에게 프로젝트 이름을 변경할 것을 요구했다.
코출루가 이를 거부하자, 이들은 NPM 운영진에게 직접 연락을 취하기에 이른다. NPM의
CEO인 아이작 슐레터는 코출루에게서 프로젝트 소유권을 강제로 빼앗아갔다. 코출루는
이에 대한 항의로 자신이 여태 NPM에 공개했던 273개 프로젝트를 모두 삭제해버렸다.</p>

<blockquote>
  <p>“저는 이 사태를 통해 NPM 역시 기업이 사람보다 위에 있는 사유지임을 깨달았습니다.
제가 오픈소스를 하는 이유는 사람들에게 힘을 주기 위해서입니다.” – <a href="https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.x44n232zr">아제르 코출루</a></p>
</blockquote>

<p>문제는, NPM에 공개된 프로젝트끼리는 레고 블록을 쌓아 올리는 것처럼
‘의존성(dependency)’이라는 관계로 엮여 있다는 점이다. 코출루가 NPM에서 삭제한
273개의 프로젝트 중에는 ‘left-pad’라는 11줄짜리 코드가 있었다. 이 코드는 다른
개발자가 제작한 ‘line-numbers’라는 프로젝트를 만드는 블록으로 쓰이고 있었고,
다시 이 ‘line-numbers’는 ‘바벨’(babel)이라는 대형 프로젝트에 사용되고 있었다. 이
바벨 프로젝트는 페이스북, 링크드인, 스포티파이 등 대형 기업들은 물론 수많은
개발자들에 의해 폭넓게 사용되고 있었는데, 가장 기초가 되는 블록인 ‘left-pad’가
삭제되자 더 이상 설치가 불가능해진 것이다. 결국 사태는 도미노처럼 번졌고, 보다
못한 NPM 운영진이 프로젝트를 강제로 복구시키는 유례 없는 일까지 일어났다.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">This action puts the
wider interests of the community of npm users at odds with the wishes of one
author; we picked the needs of the many.</p>&mdash; Laurie Voss (@seldo) <a href="https://twitter.com/seldo/status/712417019686100992?ref_src=twsrc%5Etfw">March
22, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
  <p>“이러한 행동은 NPM 사용자 커뮤니티의 넓은 이익과 한 저작자의 의도를
대립시켰습니다. 저희는 다수의 필요를 선택했습니다. 저희 NPM 내부에서도 이 방식이
옳은지에 대해 이견이 있지만, 저는 매 초마다 수백개의 빌드가 실패하는 것을 보면서
그걸 고치지 않을 수 없었습니다.” – 로리 보스 NPM의 CTO</p>
</blockquote>

<h2 id="section-1">남겨진 것들</h2>

<p>사태가 수습되자 NPM 쪽에서는 <a href="http://www.bloter.net/archives/blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">블로그
게시글</a>을 통해 사건의 전말을 밝혔다. 미숙한
소통에 대해서도 사과했다. 또한 앞으로 똑같은 문제가 발생하지 않도록 공개된 지
24시간이 지난 프로젝트는 소유자가 임의로 삭제할 수 없도록 규정을 변경했다.
마이크 로버츠 킥 대표 또한 코출루와 주고받은 e메일에서 사용된 자사의 부적절한
표현에 대한
<a href="https://medium.com/@mproberts/a-discussion-about-the-breaking-of-the-internet-3d4d2a83aa4d#.xq8eu1gws">사과글</a>을 올렸다. 코출루 역시 “이번 사건으로 여러분의 작업이
망가졌다면 죄송하다”라며 “나는 오픈소스를 사랑하며, 오픈소스 커뮤니티가 결국
NPM보다 더 자유로운 대안을 만들어낼 것이라 믿는다”라는 말을 남겼다.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Does your code depend
on fewer than 72 NPM packages? Your code is lonely and you need to read this
book. <a href="https://t.co/O0pFQ5H9jF">pic.twitter.com/O0pFQ5H9jF</a></p>&mdash; The
Practical Dev (@ThePracticalDev) <a href="https://twitter.com/ThePracticalDev/status/713003282000715776?ref_src=twsrc%5Etfw">March
24, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote>
  <p>“당신의 코드가 72개 이하의 NPM 프로젝트에 의존하나요? 그렇다면 코드가 외로울
테니 이 책을 읽어보세요. ‘불필요한 의존성을 떠맡기 – 허술한 개발 가이드’.”</p>
</blockquote>

<p>그러나 코출루와 킥, NPM 사이의 잘잘못은 뒤로한 채, 개발자 커뮤니티에서는 관련된
패러디물들이 쏟아져 나왔다. 공동의 노력으로 더 복잡한 결과물을 만들어내는
오픈소스 정신은 물론 훌륭하지만, 숙련된 개발자라면 2분이면 충분할 10줄 남짓의
간단한 함수조차 남의 코드를 끌어다 쓰는 개발 행태에 대한 비아냥이 주를 이뤘다.
여기에 코출루의 코드뿐 아니라 1줄, 4줄짜리 프로젝트들도 추가로 발견되면서
<a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">“우리는 프로그래밍하는 법을
잊어버렸는가?”</a>라는 자조의 목소리도 생겨났다.</p>

<p>‘삼국지’의 조조는 병사들의 배멀미를 해결하기 위해 배들을 쇠사슬로 연결시켜
단단히 고정시켰으나, 유비와 손권의 연합군이 불을 지르자 한꺼번에 불타버리고
말았다. 세 글자의 이름에서 11줄의 코드로, 그리고 수천개의 프로그램으로 번져나간
이번 사태는, 서로 연결하는 것이 무조건 좋은 건 아니라는 적벽대전의 교훈을 다시금
일깨웠다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
